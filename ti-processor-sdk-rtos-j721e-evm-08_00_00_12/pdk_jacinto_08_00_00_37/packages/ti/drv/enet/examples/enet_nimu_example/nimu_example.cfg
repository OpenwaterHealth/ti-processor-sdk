/* =============================================================================
 *   Copyright (c) Texas Instruments Incorporated 2020
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/* ================ General configuration ================ */
var enableStaticIP         = 0;
var enableTelnet           = 1;

var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var GateMutexPri = xdc.useModule('ti.sysbios.gates.GateMutexPri');
var NdkProcToUse = java.lang.System.getenv("CORE");
xdc.print("# !!! Using NDK configuration for [" + NdkProcToUse + "]");

/* Configure print function for NDK */
var SysCallback = xdc.useModule('xdc.runtime.SysCallback');
SysCallback.putchFxn = "&EnetNimuApp_putch";

/* Use BIOS POSIX support */
var Settings = xdc.useModule('ti.posix.tirtos.Settings');

/* Create default heap and hook it into Memory */
/* Use larger heap memory for as R5/A72 are running at higher frequencies */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Memory = xdc.module('xdc.runtime.Memory');
var heapMemParams = new HeapMem.Params;
heapMemParams.size = 512*1024;

var heap0 = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance = heap0;

/* NDK modules */
var Global                 = xdc.useModule('ti.ndk.config.Global');
var Ip                     = xdc.useModule('ti.ndk.config.Ip');
var Tcp                    = xdc.useModule('ti.ndk.config.Tcp');
var Udp                    = xdc.useModule('ti.ndk.config.Udp');
var Telnet                 = xdc.useModule('ti.ndk.config.Telnet');
var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.deleteTerminatedTasks = true;
/* Flag to check stack overflow at every Task switch */
Task.checkStackFlag        = true;

Global.stackInitHook       = "&EnetNimuApp_stackInitHook";
Global.stackDeleteHook     = '&EnetNimuApp_stackDeleteHook';

Global.networkOpenHook     = '&EnetNimuApp_netOpenHook';
Global.networkCloseHook    = '&EnetNimuApp_netCloseHook';
Global.networkIPAddrHook   = '&EnetNimuApp_ipAddrHookFxn';
/* automatically call fdOpen/CloseSession for our sockets Task */
Global.autoOpenCloseFD     = true;

Global.stackLibType        = Global.MIN;
Global.netSchedulerPri     = Global.NC_PRIORITY_HIGH;
Global.debugAbortLevel     = Global.DBG_WARN;
Global.debugPrintLevel     = Global.DBG_WARN;

/* Assign memory sections and sizes */
Global.pbmDataSection      = ".bss:NDK_PACKETMEM";
Global.memDataSection      = ".bss:NDK_MMBUFFER";
Global.lowTaskStackSize    = 4096;
Global.normTaskStackSize   = 4096;
Global.highTaskStackSize   = 8192;
Global.ndkThreadStackSize  = 8192;
/* TODO Set this value using NDK2ENET_RX_PACKETS & NDK2ENET_TX_PACKETS?? */
Global.pktNumFrameBufs     = 256;
Global.pktSizeFrameBuf     = 1664;

Global.memRawPageSize      = 3072;
Global.memRawPageCount     = 8;

/*!
 *  Sets the size of the TCP send buffer.
 */
Tcp.transmitBufSize        = 128*1024;

/*!
 *  Sets the size of the TCP receive buffer (copy mode).
 */
Tcp.receiveBufSize         = 128*1024;

/*!
 *  Sets the size of the UDP receive buffer (copy mode).
 *  Note: NDK restricts UDP packet to 3K via MMALLOC_MAXSIZE so set receive buffer
 *        to 3K only as setting it higher has no utility.
 */
Udp.receiveBufSize         = 3*1024;

/*!
 *  Sets the max number of cumulative bytes in packet buffers that can be
 *  queued up at any given TCP based socket (non-copy mode).
 */
Tcp.receiveBufLimit        = 128*1024;

if (enableStaticIP)
{
    /* Settings for static IP configuration */
    Ip.ResolveIP = false;
    Ip.CallByIP = false;
    Ip.autoIp = false;
    Ip.address = "192.168.1.4";
    Ip.mask = "255.255.255.0";
    Ip.gatewayIpAddr = "192.168.1.1";
}
else
{
    Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;
}

if(enableTelnet)
{
    /* Add a Telnet server */
    var telnetParams = new Telnet.Params();
    telnetParams.callBackFxn = '&ConsoleOpen';
    var telnet = Telnet.create(telnetParams);

    /* Add some user accounts */
    var acct1 = new Global.Account();
    acct1.username = "username";
    acct1.password = "password";
    Global.addUserAccount(acct1);
}

/* load calculation related settings */
var Load                = xdc.useModule('ti.sysbios.utils.Load');
Load.swiEnabled = true;
Load.hwiEnabled = true;
Load.taskEnabled = true;

