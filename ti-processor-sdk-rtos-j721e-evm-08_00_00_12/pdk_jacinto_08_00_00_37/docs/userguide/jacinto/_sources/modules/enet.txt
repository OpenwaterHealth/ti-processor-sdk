.. _enet:

ENET
====

Introduction
------------

.. ifconfig:: CONFIG_family in ('am65xx')

    Enet LLD is an unified Ethernet driver that support Ethernet peripherals
    found in TI SoCs, such as CPSW and ICSSG.  Enet LLD supports CPSW_2G,
    ICSSG Dual-MAC and ICSSG Switch in AM65xx devices.

.. ifconfig:: CONFIG_family in ('jacinto')

    Enet LLD is an unified Ethernet driver that support Ethernet peripherals
    found in TI SoCs, such as CPSW and ICSSG.  Enet LLD supports CPSW_2G and
    CPSW_9G in J721E devices.

.. ifconfig:: CONFIG_family in ('j7200')

    Enet LLD is an unified Ethernet driver that support Ethernet peripherals
    found in TI SoCs, such as CPSW and ICSSG.  Enet LLD supports CPSW_2G and
    CPSW_5G in J7200 devices.

.. ifconfig:: CONFIG_family in ('tpr12')

    Enet LLD is an unified Ethernet driver that support Ethernet peripherals
    found in TI SoCs, such as CPSW and ICSSG.  Enet LLD supports CPSW_2G in
    TPR12 devices.

The diagram below shows the overall software architecture of the Enet low-level
driver.  A top-level driver layer provides the interface that the applications
can use to configure the switch and to send/receive Ethernet frames.

For instance, the CPSW support in the Enet driver consists of several software
submodules that mirror those of the CPSW hardware, like DMA, ALE, MAC port,
host port, MDIO, etc. Additionally, the Enet driver also includes PHY driver
support as well as a resource manager to administrate the CPSW resources.

Enet LLD relies on other PDK drivers like UDMA for data transfer to/from the
Ethernet peripheral's host port to the other processing cores inside the TI
SoC devices. For the lower level access to the hardware registers, Enet LLD
relies on the Chip Support Library (CSL).

.. image:: ../../images/enet/EnetLLD_Diagram.png


.. ifconfig:: CONFIG_family in ('am65xx')

    ICSSG
    ^^^^^

    ICSSG Dual-MAC and Switch are both supported in Enet LLD on AM65xx devices.  Currently,
    MCU R5F core is the only core where support has been added.  Integration with TI NDK
    package has been enabled for ICSSG Dual-MAC, but not for ICSSG Switch.

    The following tables summarize the features support by ICSSG Dual-MAC and Switch.


    ICSSG Dual-MAC
    """"""""""""""

    +----------------------------------------------+----------------------------------------------------+
    | Feature                                      | Remarks                                            |
    +==============================================+====================================================+
    | VLAN classification and ingress filtering    | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+
    | FDB Multicast filtering                      | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+
    | Ethernet QoS                                 | Support up to 8 queues                             |
    +----------------------------------------------+----------------------------------------------------+
    | 802.1as support                              | Support Working Clock                              |
    +----------------------------------------------+----------------------------------------------------+
    | Port state configuration                     | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+
    | Acceptable frame type configuration          | Supported values are                               |
    |                                              |                                                    |
    |                                              |  - Admit only VLAN-tagged frames                   |
    |                                              |  - Admit only Untagged and priority-tagged frames  |
    |                                              |  - Admit all frames (default)                      |
    +----------------------------------------------+----------------------------------------------------+
    | Statistics                                   | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+


    ICSSG Switch
    """"""""""""

    +----------------------------------------------+----------------------------------------------------+
    | Feature                                      | Remarks                                            |
    +==============================================+====================================================+
    | 2-Port cutthrough switch                     | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+
    | VLAN classification and ingress filtering    | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+
    | FDB Multicast filtering                      | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+
    | Ethernet QoS                                 | Support up to 8 queues                             |
    +----------------------------------------------+----------------------------------------------------+
    | Priority regeneration                        | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+
    | 802.1as support                              | Support Working Clock                              |
    +----------------------------------------------+----------------------------------------------------+
    | 802.1Q learning bridge for MAC addresses     | Supported - Shared VLAN configuration only         |
    +----------------------------------------------+----------------------------------------------------+
    | Buffering                                    | Validated up to 200us - Buffer configurable        |
    |                                              | from application                                   |
    +----------------------------------------------+----------------------------------------------------+
    | Port State configuration                     | Independently configurable on each port            |
    +----------------------------------------------+----------------------------------------------------+
    | Acceptable frame type configuration          | Supported values are:                              |
    |                                              |                                                    |
    |                                              |  - Admit only VLAN-tagged frames                   |
    |                                              |  - Admit only Untagged and priority-tagged frames  |
    |                                              |  - Admit all frames (default)                      |
    +----------------------------------------------+----------------------------------------------------+
    | Statistics                                   | Supported                                          |
    +----------------------------------------------+----------------------------------------------------+


User Interface
--------------

For details about individual fields of this library structure, see the
PDK doxygen documentation

APIs
^^^^

The Enet LLD APIs can be broadly divided into two categories: control and data
path.  The control APIs can be used to configure all Ethernet hardware submodules
like FDB, MAC port, host port, MDIO, statistics, as well as PHY drivers and
resource management.  The data path APIs are exclusive for the DMA-based
data transfers between the TI SoC processing cores and the Ethernet peripheral.

API reference for application:

::

    #include <ti/drv/enet/enet.h>

The main APIs of the Enet LLD are the following:

- Enet_open()
- Enet_close()
- Enet_ioctl()
- Enet_poll()
- Enet_periodicTick()


Data Path APIs
""""""""""""""

The main Enet LLD functions used to send and receive packets are:

- EnetDma_openRxCh()
- EnetDma_closeRxCh()
- EnetDma_openTxCh()
- EnetDma_closeTxCh()
- EnetDma_retrieveRxPktQ()
- EnetDma_submitRxPktQ()
- EnetDma_retrieveTxPktQ()
- EnetDma_submitTxPktQ()

It's worth noting that the control path APIs are mainly IOCTL-based, and the
data path APIs are direct functions in order to avoid any additional overhead
associated with IOCTL calls as DMA data operations occur highly frequently.


IOCTL Interface
"""""""""""""""

IOCTLs are system calls that take an argument specifying the command code and
can take none or additional parameters via ``Enet_IoctlPrms`` argument.
IOCTL are used by all Enet submodules except for DMA.

The ``Enet_IoctlPrms`` parameter structure consists of input and output
argument pointers and their corresponding size.  The following helper macros are
provided to help construct the IOCTL params:

- ``ENET_IOCTL_SET_NO_ARGS(prms)``. Used for IOCTL commands that take no parameters.
- ``ENET_IOCTL_SET_IN_ARGS(prms, in)``. Used for IOCTL commands that take input
  parameters but don't output any parameter.
- ``ENET_IOCTL_SET_OUT_ARGS(prms, out)``. Used for IOCTL commands that don't take
  input parameters but return output parameters.
- ``ENET_IOCTL_SET_INOUT_ARGS(prms, in, out)``. Used for IOCTL commands that take
  input parameters and also return output parameters.

where ``prms`` in a pointer to ``Enet_IoctlPrms`` variable, ``in`` is the pointer
to IOCTL input argument and ``out`` is the pointer to IOCTL output argument.

It's recommended that the application doesn't set the ``Enet_IoctlPrms``
members individually, but only through the helper macros listed above.

Please refer to the individual IOCTL command to find out if it requires input
and/or output parameters.

lwIP Integration
----------------

.. toctree::
  :maxdepth: 1
  :hidden:

  enet_lwip_userguide

See :ref:`enet_lwip_userguide` for further information about lwIP integration into
PDK using Enet LLD, and NDK-to-lwIP migration guide.


Application
-----------

Examples
^^^^^^^^

Enet LLD comes with a set of examples demonstrating the usage of driver APIs.
The examples are:

.. ifconfig:: CONFIG_family in ('am65xx')

    - **enet_loopback**: Internal (MAC port) or external loopback test.
    - **enet_nimu_example**: TCP/IP stack integration using TI NDK package.
    - **enet_multiport**: ICSSG and CPSW multiport test app.

    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    |   Name        |      Description                             | Expected Results                    | Cores     | Peripherals         |
    |               |                                              |                                     | Supported |                     |
    +===============+==============================================+=====================================+===========+=====================+
    | **Loopback**  | Enet Loopback example demonstrates basic     | All packets sent from the example   | mcu1_0    | - CPSW_2G           |
    |               | packet send and receive on an Ethernet       | application shall be received back  |           |                     |
    |               | peripheral configured in MAC loopback        | after being looped in MAC or PHY.   |           |                     |
    |               | or PHY loopback.                             |                                     |           |                     |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    | **NIMU**      | Enet NIMU example demonstrates Enet driver   | NIMU example application shall be   | mcu1_0    | - CPSW_2G           |
    |               | integration with TI's NDK TCP/IP stack. The  | able to get an IP address when      |           | - ICSSG0 Dual-MAC 1 |
    |               | example enables runs DHCP client, it can get | connected to a network. User can    |           | - ICSSG0 Dual-MAC 2 |
    |               | an IP address when connected to a network.   | test 'ping' and packet send/receive |           | - ICSSG1 Dual-MAC 1 |
    |               |                                              | using NDK Winapps tools.            |           | - ICSSG2 Dual-MAC 2 |
    |               |                                              |                                     |           | - ICSSG3 Dual-MAC 1 |
    |               |                                              |                                     |           | - ICSSG3 Dual-MAC 2 |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    | **Multiport** | Enet Multiport example demonstrates Enet     | Multiport example app shall respond | mcu1_0    | - CPSW_2G           |
    |               | driver capability to support multiple        | to all packets sent into a MAC port |           | - ICSSG0 Dual-MAC 1 |
    |               | peripherals simultaneously. CPSW and all     | either via provided Linux host app  |           | - ICSSG0 Dual-MAC 2 |
    |               | ICSSG peripherals can be opened              | or other traffic generator.         |           | - ICSSG1 Dual-MAC 1 |
    |               | simultaneously.                              |                                     |           | - ICSSG1 Dual-MAC 2 |
    |               |                                              | RX-to-TX timestamp difference shall |           | - ICSSG2 Dual-MAC 1 |
    |               | This example application implements an RX to | be printed on UART terminal when    |           | - ICSSG2 Dual-MAC 2 |
    |               | TX loopback data path.                       | packet timestamping is enabled via  |           | - ICSSG0 Switch     |
    |               | Tx and RX packet timestamping is also        | application's menu.                 |           | - ICSSG1 Switch     |
    |               | demonstrated this example.                   |                                     |           | - ICSSG2 Switch     |
    |               | A companion Linux host application is        |                                     |           |                     |
    |               | provided to facilitate packet send/receive   |                                     |           |                     |
    |               | to the device.                               |                                     |           |                     |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+

.. ifconfig:: CONFIG_family in ('jacinto')

    - **enet_loopback**: Internal (MAC port) or external loopback test.
    - **enet_nimu_example**: TCP/IP stack integration using TI NDK package.

    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    |   Name        |      Description                             | Expected Results                    | Cores     | Peripherals         |
    |               |                                              |                                     | Supported |                     |
    +===============+==============================================+=====================================+===========+=====================+
    | **Loopback**  | Enet Loopback example demonstrates basic     | All packets sent from the example   | mcu1_0    | CPSW_2G             |
    |               | packet send and receive on an Ethernet       | application shall be received back  +-----------+---------------------+
    |               | peripheral configured in MAC loopback        | after being looped in MAC or PHY.   | mcu2_0    | CPSW_9G             |
    |               | or PHY loopback.                             |                                     +-----------+---------------------+
    |               |                                              |                                     | mcu2_1    | CPSW_2G             |
    |               |                                              |                                     +-----------+---------------------+
    |               |                                              |                                     | mpu1_0    | CPSW_2G             |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    | **NIMU**      | Enet NIMU example demonstrates Enet driver   | NIMU example application shall be   | mcu1_0    | CPSW_2G             |
    |               | integration with TI's NDK TCP/IP stack. The  | able to get an IP address when      +-----------+---------------------+
    |               | example enables runs DHCP client, it can get | connected to a network. User can    | mcu2_0    | CPSW_9G             |
    |               | an IP address when connected to a network.   | test 'ping' and packet send/receive +-----------+---------------------+
    |               |                                              | using NDK Winapps tools.            | mcu2_1    | CPSW_2G             |
    |               |                                              |                                     +-----------+---------------------+
    |               |                                              |                                     | mpu1_0    | CPSW_2G             |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+

.. ifconfig:: CONFIG_family in ('j7200')

    - **enet_loopback**: Internal (MAC port) or external loopback test.
    - **enet_nimu_example**: TCP/IP stack integration using TI NDK package.

    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    |   Name        |      Description                             | Expected Results                    | Cores     | Peripherals         |
    |               |                                              |                                     | Supported |                     |
    +===============+==============================================+=====================================+===========+=====================+
    | **Loopback**  | Enet Loopback example demonstrates basic     | All packets sent from the example   | mcu1_0    | CPSW_2G             |
    |               | packet send and receive on an Ethernet       | application shall be received back  +-----------+---------------------+
    |               | peripheral configured in MAC loopback        | after being looped in MAC or PHY.   | mcu2_0    | CPSW_5G             |
    |               | or PHY loopback.                             |                                     +-----------+---------------------+
    |               |                                              |                                     | mcu2_1    | CPSW_2G             |
    |               |                                              |                                     +-----------+---------------------+
    |               |                                              |                                     | mpu1_0    | CPSW_2G             |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    | **NIMU**      | Enet NIMU example demonstrates Enet driver   | NIMU example application shall be   | mcu1_0    | CPSW_2G             |
    |               | integration with TI's NDK TCP/IP stack. The  | able to get an IP address when      +-----------+---------------------+
    |               | example enables runs DHCP client, it can get | connected to a network. User can    | mcu2_0    | CPSW_5G             |
    |               | an IP address when connected to a network.   | test 'ping' and packet send/receive +-----------+---------------------+
    |               |                                              | using NDK Winapps tools.            | mcu2_1    | CPSW_2G             |
    |               |                                              |                                     +-----------+---------------------+
    |               |                                              |                                     | mpu1_0    | CPSW_2G             |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+

.. ifconfig:: CONFIG_family in ('tpr12')

    - **enet_loopback**: Internal (MAC port) or external loopback test.

    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    |   Name        |      Description                             | Expected Results                    | Cores     | Peripherals         |
    |               |                                              |                                     | Supported |                     |
    +===============+==============================================+=====================================+===========+=====================+
    | **Loopback**  | Enet Loopback example demonstrates basic     | All packets sent from the example   | mcu1_0    | CPSW_2G             |
    |               | packet send and receive on an Ethernet       | application shall be received back  |           |                     |
    |               | peripheral configured in MAC loopback        | after being looped in MAC or PHY.   |           |                     |
    |               | or PHY loopback.                             |                                     |           |                     |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+
    | **LWIP**      | Enet LWIP example demonstrates Enet driver   | LWIP example application shall be   | mcu1_0    | CPSW_2G             |
    |               | integration with Open source LWIP TCP/IP     | able to get an IP address when      +-----------+---------------------+
    |               | stack. The example enables runs DHCP client, | connected to a network. User can    | mcu1_1    | CPSW_2G             |
    |               | it can get an IP address when connected to a | test 'ping', 'echo' and 'iperf'     |           |                     |
    |               | network.                                     |                                     |           |                     |
    +---------------+----------------------------------------------+-------------------------------------+-----------+---------------------+



Enet loopback
"""""""""""""

This example exercises the MAC loopback functionality of the hardware. The
example is developed and tested on both bare metal and TI RTOS code base.
The Ethernet peripheral is opened with default initialization parameters and
the MAC loopback is enabled.

A Tx channel and a Rx flow are opened to enable data transfers.  Packets are
transmitted from the Switch R5F (Main R5F0_0) to the host port using the Tx
channel.  These packets are routed back to the host port by the switch
hardware as the internal loopback feature is enabled.  These packets are then
transmitted to the Switch R5F by the Rx flow and the application is notified.

The Tx and Rx functions in the example are set to transmit and receive 10000
packets.  After reaching the count of 10000, the application closes the Tx
channel, Rx flow, peripheral (i.e. CPSW) and restarts the application for
a configurable number of times.  Restarting the loopback test application
ensures that there aren’t any memory leaks, and the hardware is closed properly
and can be reopened any time.

.. _enet-lwip:

Enet LWIP
"""""""""

**Building LWIP example**

- Enabling specific features in the test

    To configure what gets built in the example, navigate to the example directory
    ``pdk/packages/ti/drv/enet/examples/enet_lwip_example`` and find the
    ``lwipcfg.h`` file. Inside, change the macros corresponding to the program
    that you wish to build to 1.

    For example, if udpecho is required, set:

      .. code-block:: c

          #define LWIP_UDPECHO_APP        1

    .. note:: The heap memory may need to be increased in the ``FreeRTOSConfig.h``
              file to accomodate multiple apps.

.. ifconfig:: CONFIG_family in ('jacinto', 'j7200', 'am65xx')

    - To build the lwip example, issue the following command: ::

        make -s enet_lwip_example_freertos

.. ifconfig:: CONFIG_family in ('tpr12')

    - To build the lwip example, issue the following command ``make -s enet_lwip_example_$(BUILD_OS_TYPE)``: ::

        make -s enet_lwip_example_tirtos

      or ::

        make -s enet_lwip_example_freertos


**Running LWIP example**

- Load and run the enet_lwip_example image from the corresponding binaries folder.
- The setup requires a LAN cable to be connected between the device and a
  multiport-router for the link status to be UP and aquire an IP address.
- Connect the LAN cable between the same router and Laptop/PC from where the
  ping/echo tests are run.
- Wait until the local interface IP is assigned and printed on the console like
  below. ::

    Starting lwIP, local interface IP is dhcp-enabled
    CPSW_2G Test on MCU NAVSS
    EnetPhy_bindDriver: PHY 0: OUI:080028 Model:23 Ver:01 <-> 'dp83867' : OK
    PHY 0 is alive
    Host MAC address: 70:ff:76:01:02:03
    [LWIPIF_LWIP] CPSW has been started successfully
    [LWIPIF_LWIP] NETIF INIT SUCCESS
    status_callback==UP, local interface IP is 0.0.0.0
    Cpsw_handleLinkUp: Port 1: Link up: 100-Mbps Full-Duplex
    MAC Port 1: link up
    link_callback==UP
    status_callback==UP, local interface IP is 192.168.0.9
    Initializing apps
    UDP server listening on port 5001

**Testing LWIP example**

Prerequisites:
LAN cable setup and device link is UP and Local interface IP is successfully aquired.

- Ping test ::

     ping -t <ip_addr>
     ping -t 192.168.0.9

- UDP/ TCP echo test

    Download echotool from this
    `website <https://github.com/pbansky/EchoTool/releases/download/v1.5.0.0/echotool.exe>`_
    and execute the commands to see the response.

    * UDP echo command: ::

        echotool.exe <ip_addr> /p udp /r 7 /n 0
        echotool.exe 192.168.0.9 /p udp /r 7 /n 0

    * TCP echo command: ::

        echotool.exe <ip_addr> /p tcp /r 7 /n 0
        echotool.exe 192.168.0.9 /p tcp /r 7 /n 0

- iperf test

    Download iperf2 from `iperf website <https://iperf.fr/iperf-download.php>`_  and execute
    the commands to see the response.

    * iperf TCP test command: ::

        iperf.exe -c <ip_addr> -r
        iperf.exe -c 192.168.0.9 -r

    * iperf UDP test command: ::

        iperf.exe -c <ip_addr> -r -u
        iperf.exe -c 192.168.0.9 -r -u


**Static IP**

The Enet lwIP example uses DHCP by default. If static IP needs to be tested, the following
two config options need to be disabled in ``examples/enet_lwip_example/lwipcfg.h``.

  .. code-block:: c

      #define USE_DHCP    0
      #define USE_AUTOIP  0

The IP address, gateway and netmask can be set in the same lwipcfg.h file.

  .. code-block:: c

      #define LWIP_PORT_INIT_IPADDR(addr)   IP4_ADDR((addr), 192,168,1,200)
      #define LWIP_PORT_INIT_GW(addr)       IP4_ADDR((addr), 192,168,1,1)
      #define LWIP_PORT_INIT_NETMASK(addr)  IP4_ADDR((addr), 255,255,255,0)


Enet NIMU Example
"""""""""""""""""
.. ifconfig:: CONFIG_family in ('jacinto', 'j7200', 'am65xx')

    The Network Developer's Kit (NDK) is a platform for development and demonstration
    of network enabled applications on TI embedded processors.  The NDK stack serves
    as a rapid prototyping platform for the development of network and packet
    processing applications.  It can be used to add network connectivity to existing
    applications for communications, configuration, and control.  Using the
    components provided in the NDK, developers can quickly move from development
    concepts to working implementations attached to the network.

    Network Interface Management Unit (NIMU) acts as an intermediate layer between
    Enet LLD and the TI-NDK (NDK is TI's TCP/IP stack with http server, telnet
    support, etc).

    The NIMU example uses the NIMU layer present in the Enet LLD and gets an IP
    address using the NDK stack and opens transmit and receive ports.

    The send and receive functionalities of the Ethernet peripheral can be tested
    using the tools provided in NDK Winapps as follows:

    * Send test: ::

        cd ndk_<version>/packages/ti/ndk/winapps/
        ./send.x86U <IP address>

    * Receive test: ::

        cd ndk_<version>/packages/ti/ndk/winapps/
        ./recv.x86U <IP address>


    Where ``IP address`` refers to the address of the processing core running the
    example, i.e. R5F, A72 or A53.

    .. note:: Enet NIMU example is supported for CPSW_2G, CPSW_5G, CPSW_9G and ICSSG Dual-MAC.
            It's not supported for ICSSG Switch.

.. ifconfig:: CONFIG_family in ('tpr12')

    Not supported for this SoC.

Enet Multiport
""""""""""""""

.. ifconfig:: CONFIG_family in ('am65xx')

    The multiport example is dedicated to demonstrate simultaneous usage of Enet
    ICSSG peripherals operating in Dual-MAC mode.  A total of up to 6 ICSSG MAC
    ports can be tested simultaneously with this example application.

    This example application also supports CPSW2G peripheral present in AM65xx
    devices.

    This example has two components:

    * **Target-side** application running on a Cortex R5F core.

       - One TX channel and one RX flow are opened for each available MAC port.
       - Application receives the packet, copies the payload into a new packet
         which is then sent back.
       - The application has a menu to enable/disable features, such as packet
         timestamping. This menu along with application logs are implemented via
         UART.

    * **Host-side** application.

       - This is a Linux command-line application meant to simplify testing of
         the multiport example, it uses a raw socket to send and receive packets.
       - Alternatively, other application could be used as well: packETH tool
         can be used to generate and send packets, Wireshark can be used to
         receive and verify packet contents.

    The diagram below shows the enabled data paths for the Ethernet peripherals
    in AM65xx device.  Note that the example application opens all these peripherals
    simultaneously, but it's not mandatory to have all ports connected at the same
    time.  Tests can be run with the connected ports.

    .. image:: ../../images/enet/MultiportApp.png

    The data path enabled in this example is as follows:

    #. Host side (PC) application sends a packet to an AM65xx IDK MAC port.

        - By default, a broadcast packet is sent but the user can specify any
          other MAC address.

    #. Target side application receives the packet, updates the MAC addresses
       in the Layer-2 header and sends the packet back.
    #. Host side application receives the packet and checks if the payload matched
       what it had sent in step 1.
    #. Packet timestamping can be enabled/disabled at any time via target-side
       application menu. Enabling timestamping implies that both RX and TX timestamps
       will be enabled.

    .. note:: Currently, this example is supported only in TI AM65xx Industrial
              Development Kit (IDK) which provides:

              - 6 x ICSSG MAC ports or 3 x ICSSG Switch peripherals
              - 1 x CPSW2G MAC port.

.. ifconfig:: CONFIG_family not in ('am65xx')

    Not supported for this SoC.

